!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("auth-backend",[],n):"object"==typeof exports?exports["auth-backend"]=n():e["auth-backend"]=n()}(global,(function(){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=5)}([function(e,n){e.exports=require("express")},function(e,n){e.exports=require("node-fetch")},function(e,n){e.exports=require("jwt-simple")},function(e,n){e.exports=require("crypto")},function(e,n){e.exports=require("uuid")},function(e,n,t){e.exports=t(6)},function(e,n,t){"use strict";t.r(n),t.d(n,"AuthenticationService",(function(){return s})),t.d(n,"buildAuthenticationRouter",(function(){return p})),t.d(n,"buildMockSsoApp",(function(){return x})),t.d(n,"buildAuthenticationBackend",(function(){return w}));var r=t(1),o=t.n(r);async function i(e,n){const t=new URLSearchParams;t.append("id_token",n);const r=await o()(`${e.tokenInfoUrl}?${t.toString()}`);if(r.status>=500)throw new Error("validation internal error");const i=await r.json();if(200!==r.status||i.error)throw new Error(`validation error: ${i.error}`);if(i.aud!==e.clientId)throw new Error("audience mismatch");return i.sub}async function a(e,n){const t=new URLSearchParams;t.append("code",n),t.append("client_id",e.clientId),t.append("client_secret",e.clientSecret);const r=await o()(e.accessTokenUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:t.toString()}),i=new URLSearchParams(await r.text()),a=i.get("error");if(a)throw new Error(`validation error: ${a}`);const c=i.get("access_token");if(!c)throw new Error("validation internal error");const s=await o()(e.userUrl,{headers:{Authorization:`Bearer ${c}`}});return(await s.json()).id}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}class s{constructor(e){c(this,"clientConfig",{}),c(this,"extractors",new Map),this.bindExtractor(e,"google",i),this.bindExtractor(e,"github",a)}supportsService(e){return this.extractors.has(e)}extractId(e,n){const t=this.extractors.get(e);if(!t)throw new Error(`Login integration with ${e} is not supported`);return t(n)}bindExtractor(e,n,t){const r=e[n];(null==r?void 0:r.clientId)&&(this.extractors.set(n,t.bind(null,r)),this.clientConfig[n]={authUrl:r.authUrl,clientId:r.clientId})}}var u=t(0),d=t.n(u);const l=d.a.json({limit:4096});function p(e,n){const t=d.a.Router();return t.get("/",(n,t)=>{t.status(200).json(e.clientConfig)}),t.post("/:name",l,async(t,r,o)=>{const{name:i}=t.params;if(!e.supportsService(i))return void o();const{externalToken:a}=t.body;if(a&&"string"==typeof a)try{const t=await e.extractId(i,a);if(!t)throw new Error("failed to get user ID");const o=n(`${i}-${t}`,i,t);r.status(200).json({userToken:o})}catch(e){"validation internal error"===e.message?r.status(500).json({error:"internal error"}):r.status(400).json({error:e.message||"unknown error"})}else r.status(400).json({error:"no externalToken provided"})}),t}var f=t(3),h=t.n(f),g=t(2),m=t.n(g),b=t(4);function y(e){return e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"):""}var x=()=>{const e=h.a.generateKeyPairSync("rsa",{modulusLength:2048,privateKeyEncoding:{type:"pkcs8",format:"pem"},publicKeyEncoding:{type:"spki",format:"pem"}}),n=d()();return n.get("/auth",(e,n)=>{var t;n.header("Content-Type","text/html").send(`\n<html>\n  <head>\n    <title>Mock OAuth service</title>\n    <style>\n      body {\n        background: #EEEEEE;\n        font: 1em sans-serif;\n        margin: 0;\n        padding: 0;\n      }\n      form {\n        width: 400px;\n        max-width: calc(100% - 20px);\n        box-sizing: border-box;\n        margin: 50px auto;\n        padding: 15px;\n        background: #FFFFFF;\n      }\n      h1 {\n        margin: 0 0 20px;\n        text-align: center;\n      }\n      p {\n        font-size: 0.8em;\n        margin: 20px 0;\n      }\n      input[type=text] {\n        width: 200px;\n        font-size: 0.9em;\n        padding: 4px;\n        margin: 0 10px;\n      }\n      button {\n        font-size: 0.9em;\n        padding: 6px 12px;\n        border: none;\n        background: #008800;\n        color: #FFFFFF;\n        cursor: pointer;\n      }\n    </style>\n  </head>\n  <body>\n    <form method="POST">\n      <h1>Mock OAuth service</h1>\n      <p>\n        This is a mock implementation of an OAuth server which is used\n        for local testing (including end-to-end automated tests).\n      </p>\n      <input type="hidden" name="redirect_uri" value="${y((t=e.query).redirect_uri)}" />\n      <input type="hidden" name="nonce" value="${y(t.nonce)}" />\n      <input type="hidden" name="state" value="${y(t.state)}" />\n      <input type="hidden" name="client_id" value="${y(t.client_id)}" />\n      <label>Sign in as <input type="text" name="identifier" required autofocus /></label><button>Sign in</button>\n    </form>\n  </body>\n</html>\n`)}),n.post("/auth",d.a.urlencoded({extended:!1}),(n,t)=>{const{redirect_uri:r,nonce:o,state:i,client_id:a,identifier:c}=n.body;r&&a&&c||t.status(400).json({error:"missing fields"});const s=Math.floor(Date.now()/1e3),u=m.a.encode({aud:a,nonce:o,jti:Object(b.v4)(),sub:c,iat:s,exp:s+3600},e.privateKey,"RS256"),d=new URLSearchParams;d.set("id_token",u),d.set("state",i),t.redirect(303,`${r}#${d.toString()}`)}),n.get("/tokeninfo",(n,t)=>{const{id_token:r}=n.query;try{t.json(m.a.decode(r,e.publicKey,!1,"RS256"))}catch(e){t.status(400).json({error:"validation failure"})}}),n};function w(e,n){const t=new s(e);return{router:p(t,n),service:t}}}])}));
//# sourceMappingURL=index.js.map